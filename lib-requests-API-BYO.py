from flask import Flask, jsonify, render_template, request
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column
from sqlalchemy import Integer, String, Boolean
from random import choice

# NOTE 1: To Build Your Own (BYO) API, the idea is instead of returning HTML 
# templates using render_template(), because the server is now acting as 
# an API, we return a JSON containing the necessary data. 

# NOTE 2: The root ('/') route provides a link to the documentation 
# generated by postman. To generate this:
# 1. Make sure that you've made each of the requests and they work as you expect.
# 2. Make sure all the requests are saved in the same collection e.g. a collection 
#    called Cafe & Wifi:
# 3. Click on the three dots next to your collection name and go to "Publish Docs"
# 4. Go through the steps to publish your documentation and you get a URL which
#    may be used in the root route as done in cafe-index.html.

# NOTE 3: the sqlite database cafes.db is pre-populated with a bunch
# of cafes in London.

app = Flask(__name__)

# CREATE DB
class Base(DeclarativeBase):
    pass
# Connect to Database
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///cafes.db'
db = SQLAlchemy(model_class=Base)
db.init_app(app)


# Cafe TABLE Configuration
class Cafe(db.Model):
    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    name: Mapped[str] = mapped_column(String(250), unique=True, nullable=False)
    map_url: Mapped[str] = mapped_column(String(500), nullable=False)
    img_url: Mapped[str] = mapped_column(String(500), nullable=False)
    location: Mapped[str] = mapped_column(String(250), nullable=False)
    seats: Mapped[str] = mapped_column(String(250), nullable=False)
    has_toilet: Mapped[bool] = mapped_column(Boolean, nullable=False)
    has_wifi: Mapped[bool] = mapped_column(Boolean, nullable=False)
    has_sockets: Mapped[bool] = mapped_column(Boolean, nullable=False)
    can_take_calls: Mapped[bool] = mapped_column(Boolean, nullable=False)
    coffee_price: Mapped[str] = mapped_column(String(250), nullable=True)

    def to_dict(self):
        # Method 1.
        dictionary = {}
        # Loop through each column in the data record
        for column in self.__table__.columns:
            # Create a new dictionary entry;
            # where the key is the name of the column
            # and the value is the value of the column
            dictionary[column.name] = getattr(self, column.name)
        return dictionary

        # Method 2. Altenatively use Dictionary Comprehension to do the same thing.
        # return {column.name: getattr(self, column.name) for column in self.__table__.columns}


with app.app_context():
    db.create_all()


@app.route("/")
def home():
    return render_template("cafe-index.html")


# HTTP GET - Read Record
@app.route("/random")
def random():
    result = db.session.execute(db.select(Cafe))
    all_cafes = result.scalars().all()
    random_cafe = choice(all_cafes)
    # print(random_cafe.name)
    # return jsonify(cafe={
    #     "id": random_cafe.id,
    #     "name": random_cafe.name,
    #     "map_url": random_cafe.map_url,
    #     "img_url": random_cafe.img_url,
    #     "location": random_cafe.location,
    #     "seats": random_cafe.seats,
    #     "has_toilet": random_cafe.has_toilet,
    #     "has_wifi": random_cafe.has_wifi,
    #     "has_sockets": random_cafe.has_sockets,
    #     "can_take_calls": random_cafe.can_take_calls,
    #     "coffee_price": random_cafe.coffee_price,
    # })
    # the below does the same thing as above but avoids the manual process

    # NOTE: we turn the random_cafe SQLAlchemy Object into a JSON. 
    # This process is called serialization.
    return jsonify(cafe=random_cafe.to_dict())


@app.route("/all")
def all():
    result = db.session.execute(db.select(Cafe).order_by(Cafe.name))
    all_cafes = result.scalars().all()
    return jsonify(cafe=[cafe.to_dict() for cafe in all_cafes])


# NOTE: Sample URL - localhost:5000/search?loc=Peckham
@app.route("/search")
def search():
    location = request.args.get("loc")
    result = db.session.execute(db.select(Cafe).where(Cafe.location == f"{location}"))
    cafes = result.scalars().all()
    if cafes:
        return jsonify(cafe=[cafe.to_dict() for cafe in cafes])
    else:
        return jsonify(error={"Not Found": "Sorry, we don't have a cafe at that location."}), 404


# NOTE: As this intro doesn't have a WTForm or HTML Form to test Post requests,
# one needs to use Postman. Under Postman, in the Body tab, select x-www-form-urlencoded
# and enter the key-value pairs needed to add a new cafe - name, map_url, etc.
#
# HTTP POST - Create Record
@app.route("/add", methods=["POST"])
def add():
    new_cafe = Cafe(
        name=request.form.get("name"),
        map_url=request.form.get("map_url"),
        img_url=request.form.get("img_url"),
        location=request.form.get("location"),
        seats=request.form.get("seats"),
        has_toilet=bool(request.form.get("has_toilet")),
        has_wifi=bool(request.form.get("has_wifi")),
        has_sockets=bool(request.form.get("has_sockets")),
        can_take_calls=bool(request.form.get("can_take_calls")),
        coffee_price=request.form.get("coffee_price"),
    )
    db.session.add(new_cafe)
    db.session.commit()
    return jsonify(response={"success": "Successfully added the new cafe."})

# HTTP PUT/PATCH - Update Record


@app.route("/update-price/<cafe_id>", methods=["PATCH"])
def update_price(cafe_id):
    # cafe_to_update = db.session.execute(db.select(Cafe).where(Cafe.id == cafe_id)).scalar()
    cafe_to_update = db.get_or_404(Cafe, cafe_id)
    cafe_to_update.coffee_price = request.args.get("new_price")
    if cafe_to_update:
        db.session.commit()
        return jsonify(response={"success": "Successfully updated the price."})
    else:
        # 404 - resource not found
        return jsonify(error={"Not Found": "Sorry a cafe with that id was not found in the database.."}), 404


# HTTP DELETE - Delete Record

@app.route("/report-closed/<cafe_id>", methods=["DELETE"])
def report_closed(cafe_id):
    # cafe_to_update = db.session.execute(db.select(Cafe).where(Cafe.id == cafe_id)).scalar()
    cafe_to_delete = db.get_or_404(Cafe, cafe_id)
    api_key = request.args.get("api_key")
    if api_key == 'TopSecretAPIKey':
        if cafe_to_delete:
            db.session.delete(cafe_to_delete)
            db.session.commit()
            return jsonify(response={"success": "Successfully deleted the cafe from the database."})
        else:
            # 404 - resource not found
            return jsonify(error={"Not Found": "Sorry a cafe with that id was not found in the database.."}), 404
    else:
        return jsonify(error={"Forbidden": "Sorry, that's not allowed. Make sure you have the correct api_key."}), 403


if __name__ == '__main__':
    app.run(debug=True)
